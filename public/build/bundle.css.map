{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  class Scene {\n    constructor(filename, func) {\n      this.objects = {};\n      this.audios = {};\n      this.rules = [];\n      this.audios[\"error\"] = new Audio(\"assets/error.mp3\");\n\n      fetch(filename)\n        .then(response => response.text())\n        .then(text =>\n          this.load(new DOMParser().parseFromString(text, \"text/xml\"))\n        )\n        .then(func);\n    }\n\n    load(xmlDoc) {\n      console.log(xmlDoc.documentElement);\n      for (let e of xmlDoc.documentElement.children) {\n        switch (e.nodeName) {\n          case \"object-init\":\n            if (e.getAttribute(\"src\"))\n              this.addCropInit(\n                e.getAttribute(\"id\"),\n                e.getAttribute(\"src\"),\n                e.getAttribute(\"x\"),\n                e.getAttribute(\"y\"),\n                e.getAttribute(\"width\"),\n                e.getAttribute(\"height\")\n              );\n            else\n              this.addInit(\n                e.getAttribute(\"id\"),\n                e.getAttribute(\"x\"),\n                e.getAttribute(\"y\"),\n                e.getAttribute(\"width\"),\n                e.getAttribute(\"height\")\n              );\n            break;\n          case \"object\":\n            if (e.getAttribute(\"src\"))\n              this.addCrop(\n                e.getAttribute(\"id\"),\n                e.getAttribute(\"src\"),\n                e.getAttribute(\"x\"),\n                e.getAttribute(\"y\"),\n                e.getAttribute(\"width\"),\n                e.getAttribute(\"height\")\n              );\n            else\n              this.add(\n                e.getAttribute(\"id\"),\n                e.getAttribute(\"x\"),\n                e.getAttribute(\"y\"),\n                e.getAttribute(\"width\"),\n                e.getAttribute(\"height\")\n              );\n            break;\n          case \"audio\":\n            this.addAudio(e.getAttribute(\"id\"));\n        }\n      }\n    }\n\n    add(id, x, y, width, height) {\n      this.objects[id] = {\n        id: id,\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        visible: false\n      };\n    }\n\n    addInit(id, x, y, width, height) {\n      this.objects[id] = {\n        id: id,\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        visible: true\n      };\n    }\n\n    addAudio(id) {\n      this.audios[id] = new Audio(\"assets/\" + id + \".mp3\");\n    }\n\n    contains(id) {\n      return this.objects[id] != undefined;\n    }\n    play(id) {\n      if (this.audios[id]) this.audios[id].play();\n    }\n\n    playError() {\n      this.play(\"error\");\n    }\n\n    stop(id) {\n      if (this.audios[id]) {\n        this.audios[id].pause();\n        this.audios[id].currentTime = 0;\n      }\n    }\n\n    hide(id) {\n      this.objects[id].visible = false;\n      scene.stop(id);\n    }\n\n    isUseful(id) {\n      return id != \"cuisine\";\n    }\n    show(id) {\n      console.log(\"show \" + id);\n      console.log(this.objects[id].visible);\n      this.objects[id].visible = true;\n      this.play(id);\n    }\n\n    addCropInit(id, imgId, x, y, width, height) {\n      this.objects[id] = {\n        id: id,\n        x: x,\n        y: y,\n        imgId: imgId,\n        width: width - x,\n        height: height - y,\n        visible: true\n      };\n    }\n\n    addCrop(id, imgId, x, y, width, height) {\n      this.objects[id] = {\n        id: id,\n        x: x,\n        y: y,\n        imgId: imgId,\n        width: width - x,\n        height: height - y,\n        visible: false\n      };\n    }\n\n    init(id) {\n      this.objects[id].visible = true;\n    }\n\n    addRule(ruleText) {}\n  }\n\n  function IDgetDual(id) {\n    if (id[id.length - 1] == \"+\") return id.substr(0, id.length - 1) + \"-\";\n    if (id[id.length - 1] == \"-\") return id.substr(0, id.length - 1) + \"+\";\n    return undefined;\n  }\n\n  function click(id) {\n    const id2 = IDgetDual(id);\n    if (id2 != undefined) {\n      scene.hide(id);\n      scene.show(id2);\n      scene = scene;\n    } else if (scene.audios[id]) scene.audios[id].play();\n  }\n\n  function drag(event, id) {\n    event.dataTransfer.setData(\"id\", id);\n    console.log(\"drag \" + id);\n  }\n\n  function drop(event, id) {\n    event.preventDefault();\n    const idSource = event.dataTransfer.getData(\"id\");\n    console.log(\"drop \" + idSource + \" on \" + id);\n    action2(idSource, id);\n  }\n\n  function action2(idSource, idTarget) {\n    if (scene.contains(idTarget + \"+\" + idSource)) {\n      scene.hide(idSource);\n      scene.hide(idTarget);\n      scene.show(idTarget + \"+\" + idSource);\n      scene = scene;\n    } else scene.playError();\n  }\n\n  function dragover(event, id) {\n    event.preventDefault();\n  }\n\n  /**** script of the game\n   */\n\n  let scene = new Scene(\"assets/scene.xml\", () => {\n    scene = scene;\n  });\n</script>\n\n<style>\n  img {\n    position: absolute;\n  }\n\n  .object:hover {\n  }\n\n  .object {\n    position: absolute;\n  }\n\n  .scene {\n    position: absolute;\n  }\n</style>\n\n<div class=\"scene\">\n  {#each Object.values(scene.objects) as { id, x, y, imgId, width, height, visible }}\n    {#if visible}\n      {#if imgId}\n        <div\n          class={scene.isUseful(id) ? 'object' : 'decoration'}\n          on:click={() => click(id)}\n          style={'position: absolute; overflow: hidden; ' + 'left: ' + x + 'px; top: ' + y + 'px; width: ' + width + 'px; height: ' + height + 'px'}>\n          <img\n            alt={id}\n            src={'assets/' + imgId + '.png'}\n            style={'position: absolute; left: -' + x + 'px; top: -' + y + 'px;'} />\n        </div>\n      {:else}\n        <div\n          class={scene.isUseful(id) ? 'object' : 'decoration'}\n          draggable=\"true\"\n          on:dragover={event => dragover(event, id)}\n          on:dragstart={event => drag(event, id)}\n          on:drop={event => drop(event, id)}\n          on:click={() => click(id)}\n          style={'position: absolute; display:inline-block; ' + 'left: ' + x + 'px; top: ' + y + 'px'}>\n          <img alt={id} width={width} height={height} src={'assets/' + id + '.png'} />\n        </div>\n      {/if}\n    {/if}\n  {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA2ME,GAAG,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAKD,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,AACpB,CAAC"
}